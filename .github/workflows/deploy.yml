name: Deploy to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Build Frontend
        run: |
          cd mcp_all_files/home/ubuntu/mcp_all_files/ebook-store
          pnpm install
          pnpm run build
          # Create 404 and index files
          cp dist/index.html dist/404.html
          # Ensure base files are in place
          touch dist/.nojekyll
          # Copy all public assets
          cp -r public/* dist/ 2>/dev/null || true
          
      - name: Build Admin Dashboard
        run: |
          cd mcp_all_files/home/ubuntu/mcp_all_files/ebook-admin-dashboard
          pnpm install
          pnpm run build
          mkdir -p ../ebook-store/dist/admin
          cp -r dist/* ../ebook-store/dist/admin/
          # Create admin 404 page
          cp ../ebook-store/dist/index.html ../ebook-store/dist/admin/404.html
          cp ../ebook-store/dist/index.html ../ebook-store/dist/admin/index.html

      - name: Configure site
        run: |
          cd mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist
          # Make 404.html a copy of index.html for SPA routing
          cp index.html 404.html
          
          # Make sure admin directory exists and has proper files
          mkdir -p admin
          cp index.html admin/404.html
          cp index.html admin/index.html
          
          # Create client-side config
          cat > config.json << 'EOL'
          {
            "baseUrl": "/ebookzone.in",
            "apiUrl": "/api",
            "assetsPath": "./assets"
          }
          EOL

          # Create security headers
          cat > _headers << 'EOL'
          /*
            Cache-Control: public, max-age=31536000
            X-Frame-Options: DENY
            X-Content-Type-Options: nosniff
            X-XSS-Protection: 1; mode=block
            Referrer-Policy: strict-origin-when-cross-origin
            Permissions-Policy: camera=(), microphone=(), geolocation=()
          EOL

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v2

      - name: Verify deployment
        run: |
          echo "Deployed to: ${{ steps.deploy.outputs.page_url }}"
