name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: "pages"
  cancel-in-progress: false

permissions:
  contents: write
  pages: write
  id-token: write
  deployments: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Setup Ruby for Jekyll
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      # Install Jekyll and dependencies
      - name: Install Jekyll and Bundler
        run: |
          gem install bundler
          bundle config set --local path 'vendor/bundle'
          bundle install

      # Build Jekyll site
      - name: Build Jekyll site
        run: |
          bundle exec jekyll build --baseurl "/ebookzone.in"
        env:
          JEKYLL_ENV: production

      # Build Frontend Store
      - name: Install and build frontend
        run: |
          cd mcp_all_files/home/ubuntu/mcp_all_files/ebook-store
          pnpm install --frozen-lockfile
          VITE_BASE_URL=/ebookzone.in VITE_GITHUB_PAGES=true pnpm run build
          cp dist/index.html dist/404.html

      # Build Admin Dashboard
      - name: Install and build admin
        run: |
          cd mcp_all_files/home/ubuntu/mcp_all_files/ebook-admin-dashboard
          pnpm install --frozen-lockfile
          pnpm run build
          mkdir -p ../ebook-store/dist/admin
          cp -r dist/* ../ebook-store/dist/admin/

      # Setup Backend
      - name: Install Python dependencies
        run: |
          cd mcp_all_files/home/ubuntu/mcp_all_files/ebook-mcp-server
          pip install -r requirements.txt

      # Create 404.html for GitHub Pages SPA routing
      - name: Create 404.html
        run: |
          cd mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist
          cp index.html 404.html

      # Setup Pages
      - name: Setup Pages
        uses: actions/configure-pages@v3

      # Fix paths and create SPA redirects
      - name: Fix paths and create redirects
        run: |
          cd mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist
          sed -i 's/\/assets/\.\/assets/g' index.html
          sed -i 's/\/src/\.\/src/g' index.html
          cp index.html 404.html
          
          # Create admin redirect
          mkdir -p admin
          cp index.html admin/index.html
          cp 404.html admin/404.html

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist

      # Configure headers and caching
      - name: Configure headers
        run: |
          echo '/*' > mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist/_headers
          echo '  Cache-Control: public, max-age=31536000' >> mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist/_headers
          echo '  X-Frame-Options: DENY' >> mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist/_headers
          echo '  X-Content-Type-Options: nosniff' >> mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist/_headers
          echo '  X-XSS-Protection: 1; mode=block' >> mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist/_headers
          echo '  Referrer-Policy: strict-origin-when-cross-origin' >> mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist/_headers
          echo '  Permissions-Policy: camera=(), microphone=(), geolocation=()' >> mcp_all_files/home/ubuntu/mcp_all_files/ebook-store/dist/_headers

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      # Verify deployment
      - name: Verify deployment
        run: |
          echo "Deployed to: ${{ steps.deployment.outputs.page_url }}"
          curl -s -o /dev/null -w "%{http_code}" ${{ steps.deployment.outputs.page_url }}
          
      # Purge cache if needed
      - name: Purge CDN cache
        run: |
          curl -X PURGE ${{ steps.deployment.outputs.page_url }}
